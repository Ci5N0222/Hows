<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Comment">

	<!-- 게시글 댓글 작성 -->
	<insert id="writeComment">
		insert into comments
		values(comment_seq.nextval,#{comment_contents}, default, #{board_seq}, #{member_id})
	</insert>
	
	<!-- 게시글 댓글 목록 출력 -->
	<!-- <select id="getCommentsBoardSeq" resultType="map">
		select 
		    c.comment_seq, 
		    c.comment_contents, 
		    to_char(c.comment_write_date, 'YYYY-MM-DD HH24:MI:SS') as comment_write_date,
		    c.board_seq, 
		    c.member_id,
		    m.nickname,
		    m.member_avatar,
		    count(distinct cl.comment_like_seq) as like_count
		from comments c
		join member m on c.member_id = m.member_id
		left join comment_like cl on c.comment_seq = cl.comment_seq 
		where c.board_seq = #{board_seq}
		group by c.comment_seq, 
		         c.comment_contents, 
		         c.comment_write_date, 
		         c.board_seq, 
		         c.member_id,
		         m.nickname,
		         m.member_avatar
		order by c.comment_seq asc
	</select> -->
	
	<!-- 게시글 댓글 목록 출력 (페이지네이션 적용) -->
    <select id="getCommentsBoardSeqWithPagination" resultType="map">
        select * from (
	        select 
	            c.comment_seq, 
	            c.comment_contents, 
	            to_char(c.comment_write_date, 'YYYY-MM-DD HH24:MI:SS') as comment_write_date,
	            c.board_seq, 
	            c.member_id,
	            m.nickname,
	            m.member_avatar,
	            count(distinct cl.comment_like_seq) as like_count,
	            row_number() over (order by c.comment_seq asc) as rn
	        from comments c
	        join member m on c.member_id = m.member_id
	        left join comment_like cl on c.comment_seq = cl.comment_seq
	        where c.board_seq = #{board_seq}
	        group by c.comment_seq, 
	                 c.comment_contents, 
	                 c.comment_write_date, 
	                 c.board_seq, 
	                 c.member_id,
	                 m.nickname,
	                 m.member_avatar
	    ) where rn between #{startRow} and #{endRow}
    </select>
	
	<!-- 게시글 댓글 수정 -->
	<update id="updateComment">
		update comments set comment_contents = #{comment_contents} where comment_seq = #{comment_seq}
	</update>
	
	<!-- 게시글 댓글 삭제 -->
	<delete id="deleteComment">
		delete from comments where comment_seq = #{comment_seq}
	</delete>
	
	<!-- 댓글 좋아요 삭제 -->
	<delete id="deleteLike">
		delete from comment_like where comment_seq = #{comment_seq}
	</delete>
	
	<!-- 사용자가 해당 댓글에 좋아요를 눌렀는지 확인 -->
	<select id="checkIfUserLikedBoard" resultType="int">
	    select count(*) 
	    from comment_like
	    where member_id = #{member_id} and comment_seq = #{comment_seq}
	</select>
	
	<!-- 댓글에 좋아요 추가 -->
	<insert id="addLike">
	    insert into comment_like (comment_like_seq, member_id, comment_seq)
	    values (comment_like_seq.nextval, #{member_id}, #{comment_seq})
	</insert>
	
	<!-- 댓글에서 좋아요 취소 -->
	<delete id="removeLike">
	    delete from comment_like
	    where member_id = #{member_id} and comment_seq = #{comment_seq}
	</delete>
	
	<!-- 댓글의 좋아요 수 가져오기 -->
	<select id="getLikeCount" resultType="int">
	    select count(*) 
	    from comment_like
	    where comment_seq = #{comment_seq}
	</select>
	
	<!-- 댓글 신고  -->
	<insert id="sendCommentReport">
	    insert into comment_report
	    values (comment_report_seq.nextval, #{report_code}, default, #{member_id}, #{comment_seq})
	</insert>
	
	<!-- 전체 댓글 수 가져오기 -->
    <select id="getTotalCommentsCount" resultType="int">
        select count(*)
        from comments
        where board_seq = #{board_seq}
    </select>
    
    <!-- 댓글에 답글 작성  -->
    <insert id="writeReply">
    	insert into reply values(reply_seq.nextval, #{reply_contents}, default, #{comment_seq}, #{member_id})
	</insert>
	
    <!-- 댓글에 달린 답글 목록 조회 -->
    <select id="getRepliesByCommentSeq" resultType="map">
        select 
		    r.reply_seq, 
		    r.reply_contents, 
		    to_char(r.reply_date, 'yyyy-mm-dd hh24:mi:ss') as reply_date,
		    r.comment_seq, 
		    r.member_id,
		    m.nickname,
		    m.member_avatar,
		    count(distinct rl.reply_like_seq) as like_count
		from reply r
		join member m on r.member_id = m.member_id
		left join reply_like rl on r.reply_seq = rl.reply_seq
		where r.comment_seq = #{comment_seq}
		group by r.reply_seq, r.reply_contents, r.reply_date, r.comment_seq, r.member_id, m.nickname, m.member_avatar
		order by r.reply_seq asc
    </select>
	
</mapper>
