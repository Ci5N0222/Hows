<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Product">

	<resultMap id="myReviewMap" type="java.util.HashMap">
		<result property="review_seq" column="review_seq"/>
		<result property="rating" column="rating"/>
		<result property="review_contents" column="review_contents"/>
		<result property="review_date" column="review_date" javaType="java.sql.Timestamp"/>
		<result property="product_seq" column="product_seq"/>
		<result property="product_title" column="product_title"/>
		<result property="member_id" column="member_id"/>
	</resultMap>

	<select id="getProducts"
		resultType="com.hows.product.dto.ProductDTO">
		SELECT *
		FROM PRODUCT ORDER BY product_seq
	</select>

	<select id="getProductByCategory" parameterType="String"
		resultType="com.hows.product.dto.ProductDTO">
		SELECT *
		FROM PRODUCT
		WHERE product_category_code = #{product_category_code}
	</select>

	<select id="getProductDetaile" parameterType="String"
		resultType="com.hows.product.dto.ProductDTO">
		SELECT *
		FROM PRODUCT
		WHERE product_seq = #{product_seq}
	</select>

	<!-- 리뷰등록 -->
	<insert id="insertReview"
		parameterType="com.hows.product.dto.ReviewDTO">
		INSERT INTO review (review_seq, rating, review_contents, review_date,
		product_seq, member_id)
		VALUES (review_seq.nextval, #{rating}, #{review_contents}, SYSDATE,
		#{product_seq}, #{member_id})
	</insert>
	
	<!-- 리뷰 이미지 등 -->
	<insert id="insertReviewImage"
		parameterType="com.hows.product.dto.ImageDTO">
		insert into review_image
		(review_image_seq, review_seq, image_url, image_order)
		values (review_image_seq.nextval, #{review_seq}, #{image_url}, #{image_order})
	</insert>
		
	<!-- 리뷰 시퀀스 가져오기 -->
	<select id="selectLastReviewSeq"
			resultType="int">
		select max(review_seq) from review
	</select>
	
	<!-- 리뷰이미지 가져오기 -->
	<select id="getReviewImgList" resultType="map" parameterType="int">
	 	select IMAGE_URL from REVIEW_IMAGE where review_seq = #{reviewSeq}
	</select>
	
	<!-- 리뷰 목록 출력 (페이징) -->
	<select id="getReviewList" resultType="map">
		 SELECT 
		    r.*,
		    (SELECT COUNT(*)
		     FROM REVIEW
		     WHERE product_seq = #{product_seq}) AS total_count
		FROM (
		    SELECT
		        r.PRODUCT_SEQ,
		        r.REVIEW_SEQ,
		        r.RATING,
		        r.REVIEW_CONTENTS,
		        TO_CHAR(r.REVIEW_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REVIEW_DATE,
		        r.MEMBER_ID,
		        ROW_NUMBER() OVER (ORDER BY r.REVIEW_DATE DESC) AS rn
		    FROM REVIEW r
		    WHERE r.product_seq = #{product_seq}
		) r
		WHERE r.rn BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<!-- 삭제 -->
	<delete id="delReviewImages" parameterType="int">
	    DELETE FROM review_images WHERE review_seq = #{review_seq}
	</delete>
	
	<delete id="delReview" parameterType="int">
	    DELETE FROM reviews WHERE review_seq = #{review_seq}
	</delete>

    
	
	
	
	
	
	
	<!-- My 리뷰 목록 -->
	<select id="myReview" resultMap="myReviewMap">
		SELECT
			r.*,
			p.product_title
		FROM
			review r
			JOIN product p ON r.product_seq = p.product_seq
		WHERE
			member_id = #{member_id}
	</select>

	<select id="myReviewImage" resultType="com.hows.product.dto.ImageDTO">
		SELECT
			*
		FROM
			review_image
		WHERE
			review_seq = #{review_seq}
	</select>




	<insert id="insert">
		<selectKey keyProperty="product_seq" resultType="int"
			order="AFTER">
			select product_seq.currval from dual
		</selectKey>
		insert into product values (product_seq.nextval, ' ',
		#{product_title}, #{product_contents}, #{price}, #{quantity},
		#{product_category_code})
	</insert>
	
	<delete id="deleteProduct">
		delete from product where product_seq = #{productSeq}
	</delete>

	<update id="updateThumbNail">
		update product set product_thumbnail = #{url} where product_seq = #{seq}
	</update>

	<!-- 관리자 -->
	<!-- 리뷰 신고목록 조회 (관리자) -->
	<select id="getReportedReviews" resultType="map">
    SELECT *
    FROM (
        SELECT 
            r.review_seq,                  <!-- 리뷰 번호 -->
            p.product_title,               <!-- 상품 제목 -->
            m.nickname,        			   <!-- 리뷰 작성자 (닉네임) -->
            r.review_contents,             <!-- 리뷰 내용 추가 -->
            TO_CHAR(r.review_date, 'YYYY-MM-DD HH24:MI:SS') AS review_date,  <!-- 변환 -->
            COUNT(rr.review_report_seq) AS report_count,  <!-- 신고 횟수 -->
            ROW_NUMBER() OVER (ORDER BY r.review_seq DESC) AS row_num  <!-- 각 행에 순번 부여 -->
        FROM 
            review r
        JOIN 
            product p ON r.product_seq = p.product_seq
        JOIN 
            member m ON r.member_id = m.member_id
        JOIN 
            review_report rr ON r.review_seq = rr.review_seq  <!-- 신고 기록 조인 -->
        GROUP BY 
            r.review_seq, p.product_title, m.nickname, r.review_contents, r.review_date
    )
    WHERE row_num BETWEEN #{startRow} AND #{endRow}  <!-- 페이징 처리 -->
	</select>
	
	<!-- 페이지네비를 위한 신고 리뷰 카운트 (관리자) -->
	<select id="getReportedReviewsCount" resultType="int">
    SELECT 
        COUNT(DISTINCT r.review_seq)  -- 중복된 리뷰는 하나로 계산
    FROM 
        review r
    JOIN 
        review_report rr ON r.review_seq = rr.review_seq
	</select>

	<!-- 리뷰 신고내역 조회 (관리자) -->
	<select id="selectReviewReport" resultType="com.hows.product.dto.ReviewReportDTO">
    	SELECT 
        	rr.review_report_seq,
        	rp.report_description AS report_code,  <!-- 신고 사유를 report_code 자리에 가져옴 -->
        	rr.review_report_date,
        	rr.review_seq,
        	m.nickname AS member_id  <!-- member_id 대신 nickname을 가져옴 -->
        FROM 
        	review_report rr
        JOIN 
        	member m ON rr.member_id = m.member_id
        JOIN 
        	report rp ON rr.report_code = rp.report_code  <!-- report 테이블 조인하여 report_description 가져옴 -->
        WHERE 
        	rr.review_seq = #{review_seq}
	</select>
	
	<!-- 신고 리뷰 및 관련 신고 기록 삭제 (관리자) -->
	<delete id="deleteReview" parameterType="int">
    <!-- 먼저 리뷰에 대한 신고 기록 삭제 -->
    	DELETE FROM review_report
    	WHERE review_seq = #{review_seq}	
	</delete>
	
	<!-- 그 다음에 리뷰 삭제 -->
	<delete id="deleteReviewReport">
    DELETE FROM review
    WHERE review_seq = #{review_seq}
	</delete>
	
	<!-- 상품 수량 변경 -->
	<update id="updateByQuantity">
		update product set quantity = #{quantity} where product_seq = #{productSeq}
	</update>
</mapper>